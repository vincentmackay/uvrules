#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Thu Feb 15 12:27:51 2024@author: vincent"""import numpy as npfrom uvComplete.utils import collision_checkrandom_seed = 11141def create_spiral_array(n, array_size, diameter=1):    array_radius = array_size/2    antpos = np.array([[0,0]])  # Use a list to accumulate antpos        golden_angle = np.pi * (3 - np.sqrt(5))        # Attempt to place each antpos, skipping those too close to others    i=0    while len(antpos)<n:  # Increase attempts to ensure we get enough antpos        #r = array_radius * np.sqrt(len(antpos)) / np.sqrt(n)  # Adjust radius based on antpos placed, not attempts        r = (array_radius * np.sqrt(i+1) / np.sqrt(n)) % array_radius  # Adjust radius based on antpos placed, not attempts                theta = i * golden_angle                x = r * np.cos(theta)        y = r * np.sin(theta)                new_antpos = np.array([x, y])        i+=1                # Check for a collision        if collision_check(np.vstack([antpos, new_antpos]),diameter):            continue        else:            antpos = np.vstack([antpos, new_antpos])                return antpos